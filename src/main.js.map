{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../packages/tsc-wrapped/src/main.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as tsickle from 'tsickle';\nimport * as ts from 'typescript';\n\nimport {CliOptions} from './cli_options';\nimport {MetadataWriterHost} from './compiler_host';\n\nimport {CodegenExtension, createBundleIndexHost} from './main_no_tsickle';\nimport {check, tsc} from './tsc';\nimport {VinylFile, isVinylFile} from './vinyl_file';\n\nconst TS_EXT = /\\.ts$/;\n\nexport function main(\n    project: string | VinylFile, cliOptions: CliOptions, codegen?: CodegenExtension,\n    options?: ts.CompilerOptions): Promise<any> {\n  try {\n    let projectDir = project;\n    // project is vinyl like file object\n    if (isVinylFile(project)) {\n      projectDir = path.dirname(project.path);\n    }\n    // project is path to project file\n    else if (fs.lstatSync(project).isFile()) {\n      projectDir = path.dirname(project);\n    }\n\n    // file names in tsconfig are resolved relative to this absolute path\n    const basePath = path.resolve(process.cwd(), cliOptions.basePath || projectDir);\n\n    // read the configuration options from wherever you store them\n    let {parsed, ngOptions} = tsc.readConfiguration(project, basePath, options);\n    ngOptions.basePath = basePath;\n    let rootFileNames: string[] = parsed.fileNames.slice(0);\n    const createProgram = (host: ts.CompilerHost, oldProgram?: ts.Program) => {\n      return ts.createProgram(rootFileNames.slice(0), parsed.options, host, oldProgram);\n    };\n    const addGeneratedFileName = (genFileName: string) => {\n      if (genFileName.startsWith(basePath) && TS_EXT.exec(genFileName)) {\n        rootFileNames.push(genFileName);\n      }\n    };\n\n    const diagnostics = (parsed.options as any).diagnostics;\n    if (diagnostics) (ts as any).performance.enable();\n\n    let host = ts.createCompilerHost(parsed.options, true);\n    // Make sure we do not `host.realpath()` from TS as we do not want to resolve symlinks.\n    // https://github.com/Microsoft/TypeScript/issues/9552\n    host.realpath = (fileName: string) => fileName;\n\n    // If the compilation is a flat module index then produce the flat module index\n    // metadata and the synthetic flat module index.\n    if (ngOptions.flatModuleOutFile && !ngOptions.skipMetadataEmit) {\n      const {host: bundleHost, indexName, errors} =\n          createBundleIndexHost(ngOptions, rootFileNames, host);\n      if (errors) check(errors);\n      if (indexName) addGeneratedFileName(indexName);\n      host = bundleHost;\n    }\n\n    const tsickleHost: tsickle.TsickleHost = {\n      shouldSkipTsickleProcessing: (fileName) => /\\.d\\.ts$/.test(fileName),\n      pathToModuleName: (context, importPath) => '',\n      shouldIgnoreWarningsForPath: (filePath) => false,\n      fileNameToModuleId: (fileName) => fileName,\n      googmodule: false,\n      untyped: true,\n      convertIndexImportShorthand: false,\n      transformDecorators: ngOptions.annotationsAs !== 'decorators',\n      transformTypesToClosure: ngOptions.annotateForClosureCompiler,\n    };\n\n    const program = createProgram(host);\n\n    const errors = program.getOptionsDiagnostics();\n    check(errors);\n\n    if (ngOptions.skipTemplateCodegen || !codegen) {\n      codegen = () => Promise.resolve([]);\n    }\n\n    if (diagnostics) console.time('NG codegen');\n    return codegen(ngOptions, cliOptions, program, host).then((genFiles) => {\n      if (diagnostics) console.timeEnd('NG codegen');\n\n      // Add the generated files to the configuration so they will become part of the program.\n      if (ngOptions.alwaysCompileGeneratedCode) {\n        genFiles.forEach(genFileName => addGeneratedFileName(genFileName));\n      }\n      if (!ngOptions.skipMetadataEmit) {\n        host = new MetadataWriterHost(host, ngOptions, true);\n      }\n\n      // Create a new program since codegen files were created after making the old program\n      let programWithCodegen = createProgram(host, program);\n      tsc.typeCheck(host, programWithCodegen);\n\n      if (diagnostics) console.time('Emit');\n      const {diagnostics: emitDiags} =\n          tsickle.emitWithTsickle(programWithCodegen, tsickleHost, host, ngOptions);\n      if (diagnostics) console.timeEnd('Emit');\n      check(emitDiags);\n\n      if (diagnostics) {\n        (ts as any).performance.forEachMeasure(\n            (name: string, duration: number) => { console.error(`TS ${name}: ${duration}ms`); });\n      }\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n// CLI entry point\nif (require.main === module) {\n  const args = process.argv.slice(2);\n  let {options, errors} = (ts as any).parseCommandLine(args);\n  check(errors);\n  const project = options.project || '.';\n  // TODO(alexeagle): command line should be TSC-compatible, remove \"CliOptions\" here\n  const cliOptions = new CliOptions(require('minimist')(args));\n  main(project, cliOptions, undefined, options)\n      .then((exitCode: any) => process.exit(exitCode))\n      .catch((e: any) => {\n        console.error(e.stack);\n        console.error('Compilation failed');\n        process.exit(1);\n      });\n}\n"]}