{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/src/main.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {check, tsc} from './tsc';\n\nimport NgOptions from './options';\nimport {MetadataWriterHost, TsickleHost} from './compiler_host';\n\nexport type CodegenExtension = (ngOptions: NgOptions, program: ts.Program, host: ts.CompilerHost) =>\n    Promise<void>;\n\nexport function main(project: string, basePath?: string, codegen?: CodegenExtension): Promise<any> {\n  try {\n    let projectDir = project;\n    if (fs.lstatSync(project).isFile()) {\n      projectDir = path.dirname(project);\n    }\n    // file names in tsconfig are resolved relative to this absolute path\n    basePath = path.join(process.cwd(), basePath || projectDir);\n\n    // read the configuration options from wherever you store them\n    const {parsed, ngOptions} = tsc.readConfiguration(project, basePath);\n    ngOptions.basePath = basePath;\n\n    const host = ts.createCompilerHost(parsed.options, true);\n    const program = ts.createProgram(parsed.fileNames, parsed.options, host);\n    const errors = program.getOptionsDiagnostics();\n    check(errors);\n\n    if (ngOptions.skipTemplateCodegen || !codegen) {\n      codegen = () => Promise.resolve(null);\n    }\n    return codegen(ngOptions, program, host).then(() => {\n      // Create a new program since codegen files were created after making the old program\n      const newProgram = ts.createProgram(parsed.fileNames, parsed.options, host, program);\n      tsc.typeCheck(host, newProgram);\n\n      // Emit *.js with Decorators lowered to Annotations, and also *.js.map\n      const tsicklePreProcessor = new TsickleHost(host, newProgram);\n      tsc.emit(tsicklePreProcessor, newProgram);\n\n      if (!ngOptions.skipMetadataEmit) {\n        // Emit *.metadata.json and *.d.ts\n        // Not in the same emit pass with above, because tsickle erases\n        // decorators which we want to read or document.\n        // Do this emit second since TypeScript will create missing directories for us\n        // in the standard emit.\n        const metadataWriter = new MetadataWriterHost(host, newProgram);\n        tsc.emit(metadataWriter, newProgram);\n      }\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n// CLI entry point\nif (require.main === module) {\n  const args = require('minimist')(process.argv.slice(2));\n  main(args.p || args.project || '.', args.basePath)\n      .then(exitCode => process.exit(exitCode))\n      .catch(e => {\n        console.error(e.stack);\n        console.error('Compilation failed');\n        process.exit(1);\n      });\n}\n"]}