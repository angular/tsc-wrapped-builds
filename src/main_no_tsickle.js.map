{"version":3,"file":"main_no_tsickle.js","sourceRoot":"","sources":["../../../../packages/tsc-wrapped/src/main_no_tsickle.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,2BAA6B;AAC7B,+BAAiC;AAEjC,qCAA+D;AAE/D,iDAAyD;AACzD,+CAAqD;AAGrD,6BAAgC;AAAxB,0BAAA,SAAS,CAAA;AAUjB,IAAM,GAAG,GAAG,UAAU,CAAC;AACvB,IAAM,MAAM,GAAG,UAAU,CAAC;AAE1B,+BACI,SAAoB,EAAE,SAAmB,EACzC,IAAO;IACT,IAAM,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAZ,CAAY,CAAC,CAAC;IAClD,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC;YACL,IAAI,MAAA;YACJ,MAAM,EAAE,CAAC;oBACP,IAAI,EAAE,IAA4B;oBAClC,KAAK,EAAE,IAAqB;oBAC5B,MAAM,EAAE,IAAqB;oBAC7B,WAAW,EACP,oGAAoG;oBACxG,QAAQ,EAAE,EAAE,CAAC,kBAAkB,CAAC,KAAK;oBACrC,IAAI,EAAE,CAAC;iBACR,CAAC;SACH,CAAC;IACJ,CAAC;IACD,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IACtB,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;IAC9C,IAAM,OAAO,GACT,IAAI,yBAAe,CAAC,WAAW,EAAE,SAAS,CAAC,YAAY,EAAE,IAAI,6BAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5F,IAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;IACnD,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACzD,IAAM,IAAI,GACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,SAAS,CAAC,iBAAmB,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;IAC/F,IAAM,YAAY,GAAG,OAAK,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAG,CAAC;IACvD,IAAM,OAAO,GAAG,oCAAqB,CAAC,YAAY,EAAE,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC7E,IAAI,GAAG,wCAAwB,CAAC,IAAI,EAAE,EAAC,IAAI,MAAA,EAAE,OAAO,SAAA,EAAE,QAAQ,UAAA,EAAC,CAAC,CAAC;IACjE,MAAM,CAAC,EAAC,IAAI,MAAA,EAAE,SAAS,EAAE,IAAI,EAAC,CAAC;AACjC,CAAC;AA9BD,sDA8BC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {CompilerHostAdapter, MetadataBundler} from './bundler';\nimport {CliOptions} from './cli_options';\nimport {createSyntheticIndexHost} from './compiler_host';\nimport {privateEntriesToIndex} from './index_writer';\nimport NgOptions from './options';\n\nexport {UserError} from './tsc';\n\nexport interface CodegenExtension {\n  /**\n   * Returns the generated file names.\n   */\n  (ngOptions: NgOptions, cliOptions: CliOptions, program: ts.Program,\n   host: ts.CompilerHost): Promise<string[]>;\n}\n\nconst DTS = /\\.d\\.ts$/;\nconst JS_EXT = /(\\.js|)$/;\n\nexport function createBundleIndexHost<H extends ts.CompilerHost>(\n    ngOptions: NgOptions, rootFiles: string[],\n    host: H): {host: H, indexName?: string, errors?: ts.Diagnostic[]} {\n  const files = rootFiles.filter(f => !DTS.test(f));\n  if (files.length != 1) {\n    return {\n      host,\n      errors: [{\n        file: null as any as ts.SourceFile,\n        start: null as any as number,\n        length: null as any as number,\n        messageText:\n            'Angular compiler option \"flatModuleIndex\" requires one and only one .ts file in the \"files\" field.',\n        category: ts.DiagnosticCategory.Error,\n        code: 0\n      }]\n    };\n  }\n  const file = files[0];\n  const indexModule = file.replace(/\\.ts$/, '');\n  const bundler =\n      new MetadataBundler(indexModule, ngOptions.flatModuleId, new CompilerHostAdapter(host));\n  const metadataBundle = bundler.getMetadataBundle();\n  const metadata = JSON.stringify(metadataBundle.metadata);\n  const name =\n      path.join(path.dirname(indexModule), ngOptions.flatModuleOutFile !.replace(JS_EXT, '.ts'));\n  const libraryIndex = `./${path.basename(indexModule)}`;\n  const content = privateEntriesToIndex(libraryIndex, metadataBundle.privates);\n  host = createSyntheticIndexHost(host, {name, content, metadata});\n  return {host, indexName: name};\n}"]}