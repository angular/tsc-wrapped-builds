{"version":3,"file":"options.js","sourceRoot":"","sources":["../../../../../tools/@angular/tsc-wrapped/src/options.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as ts from 'typescript';\n\ninterface Options extends ts.CompilerOptions {\n  // Absolute path to a directory where generated file structure is written.\n  // If unspecified, generated files will be written alongside sources.\n  genDir?: string;\n\n  // Path to the directory containing the tsconfig.json file.\n  basePath?: string;\n\n  // Don't produce .metadata.json files (they don't work for bundled emit with --out)\n  skipMetadataEmit?: boolean;\n\n  // Produce an error if the metadata written for a class would produce an error if used.\n  strictMetadataEmit?: boolean;\n\n  // Don't produce .ngfactory.ts or .ngstyle.ts files\n  skipTemplateCodegen?: boolean;\n\n  // Whether to generate a bundle index of the given name and the corresponding bundled\n  // metadata. This option is intended to be used when creating library bundles similar\n  // to how `@angular/core` and `@angular/common` are generated.\n  // When this option is used the `package.json` for the library should refered to the\n  // generated bundle index instead of the library index file. Only the bundle index\n  // metadata is required as the bundle index contains all metadata visible from the\n  // bundle index. The bundle index is used to import symbols for generating\n  // .ngfactory.ts files and includes both the public API from the root .ts file as well\n  // as shrowded internal symbols.\n  // The by default the .ts file supplied in the `files` files field is assumed to be\n  // library index. If more than one is specified, uses `libraryIndex` to select the\n  // file to use. If more than on .ts file is supplied and no `libraryIndex` is supllied\n  // an error is produced.\n  // A bundle index .d.ts and .js will be created with the given `bundleIndex` name in the\n  // same location as the library index .d.ts file is emitted.\n  // For example, if a library uses `index.ts` file as the root file, the `tsconfig.json`\n  // `files` field would be `[\"index.ts\"]`. The `bundleIndex` options could then be set\n  // to, for example `\"bundle_index\"`, which produces a `bundle_index.d.ts` and\n  // `bundle_index.metadata.json` files. The library's `package.json`'s `module` field\n  // would be `\"bundle_index.js\"` and the `typings` field would be `\"bundle_index.d.ts\"`.\n  bundleIndex?: string;\n\n  // Override which module is used as the library index. This is only meaningful if\n  // `bundleIndex` is also supplied and only necessary if more than one `.ts` file is\n  // supplied in the `files` field. This must be of the form found in a import\n  // declaration. For example, if the library index is in `index.ts` then the\n  // `libraryIndex` field should be `\"./index\"`.\n  libraryIndex?: string;\n\n  // Preferred module name to use for importing the generated bundle. References\n  // generated by `ngc` will use this module name when importing symbols from the\n  // generated bundle. This is only meaningful when `bundleIndex` is also supplied. It is\n  // otherwise ignored.\n  importAs?: string;\n\n  // Whether to generate code for library code.\n  // If true, produce .ngfactory.ts and .ngstyle.ts files for .d.ts inputs.\n  // Default is true.\n  generateCodeForLibraries?: boolean;\n\n  // Insert JSDoc type annotations needed by Closure Compiler\n  annotateForClosureCompiler?: boolean;\n\n  // Modify how angular annotations are emitted to improve tree-shaking.\n  // Default is static fields.\n  // decorators: Leave the Decorators in-place. This makes compilation faster.\n  //             TypeScript will emit calls to the __decorate helper.\n  //             `--emitDecoratorMetadata` can be used for runtime reflection.\n  //             However, the resulting code will not properly tree-shake.\n  // static fields: Replace decorators with a static field in the class.\n  //                Allows advanced tree-shakers like Closure Compiler to remove\n  //                unused classes.\n  annotationsAs?: 'decorators'|'static fields';\n\n  // Print extra information while running the compiler\n  trace?: boolean;\n\n  // Whether to embed debug information in the compiled templates\n  debug?: boolean;\n}\n\nexport default Options;\n"]}